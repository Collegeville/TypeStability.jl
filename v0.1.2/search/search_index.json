{
    "docs": [
        {
            "location": "/", 
            "text": "TypeStability.jl\n\n\n\n\nFunction Documentation\n\n\nInline Stability Checks\n\n\nExternal Stability Checks\n\n\nUtiltities\n\n\n\n\n\n\nTypeStability.jl\n\n\nInline Stability Checks\n\n\nExternal Stability Checks\n\n\n\n\n\n\n\n\nTypeStability.jl provides tools to automatically check the type stability of functions.\n\n\n\n\nInline Stability Checks\n\n\nTypeStability.jl provides the ability to inline the checks with the function declarations.\n\n\nThe inline checks are disable by default, but are enabled with the function \nenable_inline_stability_checks(::Bool)\n.  This allows the checks to not reduce the load time of the functions, unless the type stability checks are explictly requested such as while unit testing.\n\n\nA basic example of using inline checks:\n\n\njulia\n using TypeStability\n\njulia\n enable_inline_stability_checks(true)\ntrue\n\njulia\n @stable_function [(Float64,)] function f(x)\n                          if x \n 0\n                              x\n                          else\n                              Int(0)\n                          end\n                      end\nf(Float64) is not stable\n  return is of type Union{Float64, Int64}\n\njulia\n f\nf (generic function with 1 method)\n\njulia\n @stable_function [(Float64,)] function g(x)\n                          if x \n 0\n                              x\n                          else\n                             0.0\n                          end\n                      end\n\njulia\n g\ng (generic function with 1 method)\n\n\n\n\nThe \n@stable_function\n macro has 2 signatures, \n@stable_function(signatures, function)\n and \n@stable_function(signatures, accepted_instability, function)\n.  The \nsignatures\n argument is a iterable collection of method signatures to test for stability, where each method signature is a tuple of types or an \nAbstractArray\n of types.  The \naccepted_instability\n argument is a \nDict\n-like object with a \nget\n method, see \ncheck_method\n for details.  Finally, \nfunction\n is either a symbol naming the function to test, or an Expr containing one or more function definitions.  Multiple functions can be nesting in a \nblock\n Expr and macros are expanded before walking the code, but functions nested in structures may not be recognized.  If \ninline_stability_checks_enabled\n returns true, each function is checked for stability as per \ncheck_function\n, then prints warnings if there are any instabilities found.\n\n\n\n\nExternal Stability Checks\n\n\nStability can also be checked in a seperate location from the function declarations.  The functions \ncheck_function\n and \ncheck_method\n check the stability of a list of methods or just one method respectively and provide \nStabilityReport\n objects containing the results.   The functions \ncheck_function\n and \ncheck_method\n take an optional argument of \naccepted_instability\n, which is an object that should have a \nget\n method (like \nDict\n) that acts as a whitelist of unstable variables.\n\n\nStability reports can be inspected with the functions \nis_stable\n and \nstability_warn\n.  \nis_stable\n takes either a single \nStabilityReport\n, an \nAbstractArray{StabilityReport}\n or a \nSet{StabilityReport}\n object and returns true if all of the reports have no instability.  The \nstability_warn\n function takes the name of a function and a iterable collection of method signature - stability report pairs and displays a warning message for any instability.", 
            "title": "Home"
        }, 
        {
            "location": "/#typestabilityjl", 
            "text": "Function Documentation  Inline Stability Checks  External Stability Checks  Utiltities    TypeStability.jl  Inline Stability Checks  External Stability Checks     TypeStability.jl provides tools to automatically check the type stability of functions.", 
            "title": "TypeStability.jl"
        }, 
        {
            "location": "/#inline-stability-checks", 
            "text": "TypeStability.jl provides the ability to inline the checks with the function declarations.  The inline checks are disable by default, but are enabled with the function  enable_inline_stability_checks(::Bool) .  This allows the checks to not reduce the load time of the functions, unless the type stability checks are explictly requested such as while unit testing.  A basic example of using inline checks:  julia  using TypeStability\n\njulia  enable_inline_stability_checks(true)\ntrue\n\njulia  @stable_function [(Float64,)] function f(x)\n                          if x   0\n                              x\n                          else\n                              Int(0)\n                          end\n                      end\nf(Float64) is not stable\n  return is of type Union{Float64, Int64}\n\njulia  f\nf (generic function with 1 method)\n\njulia  @stable_function [(Float64,)] function g(x)\n                          if x   0\n                              x\n                          else\n                             0.0\n                          end\n                      end\n\njulia  g\ng (generic function with 1 method)  The  @stable_function  macro has 2 signatures,  @stable_function(signatures, function)  and  @stable_function(signatures, accepted_instability, function) .  The  signatures  argument is a iterable collection of method signatures to test for stability, where each method signature is a tuple of types or an  AbstractArray  of types.  The  accepted_instability  argument is a  Dict -like object with a  get  method, see  check_method  for details.  Finally,  function  is either a symbol naming the function to test, or an Expr containing one or more function definitions.  Multiple functions can be nesting in a  block  Expr and macros are expanded before walking the code, but functions nested in structures may not be recognized.  If  inline_stability_checks_enabled  returns true, each function is checked for stability as per  check_function , then prints warnings if there are any instabilities found.", 
            "title": "Inline Stability Checks"
        }, 
        {
            "location": "/#external-stability-checks", 
            "text": "Stability can also be checked in a seperate location from the function declarations.  The functions  check_function  and  check_method  check the stability of a list of methods or just one method respectively and provide  StabilityReport  objects containing the results.   The functions  check_function  and  check_method  take an optional argument of  accepted_instability , which is an object that should have a  get  method (like  Dict ) that acts as a whitelist of unstable variables.  Stability reports can be inspected with the functions  is_stable  and  stability_warn .   is_stable  takes either a single  StabilityReport , an  AbstractArray{StabilityReport}  or a  Set{StabilityReport}  object and returns true if all of the reports have no instability.  The  stability_warn  function takes the name of a function and a iterable collection of method signature - stability report pairs and displays a warning message for any instability.", 
            "title": "External Stability Checks"
        }, 
        {
            "location": "/functions/", 
            "text": "Function Documentation\n\n\n\n\nFunction Documentation\n\n\nInline Stability Checks\n\n\nExternal Stability Checks\n\n\nUtiltities\n\n\n\n\n\n\nTypeStability.jl\n\n\nInline Stability Checks\n\n\nExternal Stability Checks\n\n\n\n\n\n\n\n\n\n\nInline Stability Checks\n\n\n#\n\n\nTypeStability.enable_inline_stability_checks\n \n \nFunction\n.\n\n\nenable_inline_stability_checks(::Bool)\n\n\n\n\nSets whether to run inline stability checks from \n@stable_function\n.\n\n\nIf it is set to \nfalse\n (the default value), @stable_function does not perform any type stability checks.\n\n\nThe value is checked when @stable_function is evaluated, so this should useually be set at the begining of a package definition.\n\n\nSee \ninline_stability_checks_enabled\n.\n\n\nsource\n\n\n#\n\n\nTypeStability.inline_stability_checks_enabled\n \n \nFunction\n.\n\n\ninline_stability_checks_enabled()::Bool\n\n\n\n\nReturns whether inline stability checks are enabled.\n\n\nSee \nenable_inline_stability_checks\n.\n\n\nsource\n\n\n#\n\n\nTypeStability.@stable_function\n \n \nMacro\n.\n\n\n@stable_function arg_lists function_name\n@stable_function arg_lists function_definition(s)\n@stable_function arg_lists acceptable_instability function_name\n@stable_function arg_lists acceptable_instability function_definitions(s)\n\n\n\n\nChecks the type stability of the function under the given argument lists.\n\n\nIf the second value is a function definition, the function is defined before checking type stability.\n\n\nsource\n\n\n\n\nExternal Stability Checks\n\n\n#\n\n\nTypeStability.StabilityReport\n \n \nType\n.\n\n\nStabilityReport()\nStabilityReport(unstable_variables::Vector{Tuple{Symbol, Type}})\n\n\n\n\nHolds information about the stability of a method.\n\n\nIf \nunstable_vars\n is present, set the fields.  Otherwise, creates an empty set.\n\n\nSee \nis_stable\n\n\nsource\n\n\n#\n\n\nTypeStability.is_stable\n \n \nFunction\n.\n\n\nis_stable(report::StabilityReport)::Bool\nis_stable(reports::AbstractArray{Tuple{Any, StabilityReport}})::Bool\n\n\n\n\nCheck if the given \nStabilityReport\ns don't have any unstable types.\n\n\nsource\n\n\n#\n\n\nTypeStability.stability_warn\n \n \nFunction\n.\n\n\nstability_warn(func_name, report)\n\n\n\n\nDisplays warnings about the function if any of the reports are not stable\n\n\nsource\n\n\n#\n\n\nTypeStability.check_function\n \n \nFunction\n.\n\n\ncheck_function(func, signatures, acceptable_instability=Dict())\n\n\n\n\nCheck that the function is stable under each of the given signatures.\n\n\nReturn an array of method signature-\nStabilityReport\n pairs from \ncheck_method\n.\n\n\nsource\n\n\n#\n\n\nTypeStability.check_method\n \n \nFunction\n.\n\n\ncheck_method(func, signature, acceptable_instability=Dict())\n\n\n\n\nCreate a \nStabilityReport\n object describing the type stability of the method.\n\n\nCompute non-concrete types of variables and return value, returning them in a \nStabilityReport\n Object\n\n\nacceptable_instability\n, if present, is a mapping of variables that are allowed be non-concrete types.  \nget\n is called with the mapping, the variable's symbol and \nBool\n to get the variable's allowed type.  Additionally, the return value is checked using \n:return\n as the symbol.\n\n\nsource\n\n\n\n\nUtiltities\n\n\n#\n\n\nTypeStability.RegexDict\n \n \nType\n.\n\n\nRegexDict(::Tuple{Union{Regex, String}, T}...)\n\n\n\n\nCreates a dictionary that uses Regexes as keys and tests against those when looking up keys. Symbols can be used as lookup keys, by using their name. If multiple Regexes match a key, the value associated with any of them may be returned.\n\n\nsource", 
            "title": "Functions"
        }, 
        {
            "location": "/functions/#function-documentation", 
            "text": "Function Documentation  Inline Stability Checks  External Stability Checks  Utiltities    TypeStability.jl  Inline Stability Checks  External Stability Checks", 
            "title": "Function Documentation"
        }, 
        {
            "location": "/functions/#inline-stability-checks", 
            "text": "#  TypeStability.enable_inline_stability_checks     Function .  enable_inline_stability_checks(::Bool)  Sets whether to run inline stability checks from  @stable_function .  If it is set to  false  (the default value), @stable_function does not perform any type stability checks.  The value is checked when @stable_function is evaluated, so this should useually be set at the begining of a package definition.  See  inline_stability_checks_enabled .  source  #  TypeStability.inline_stability_checks_enabled     Function .  inline_stability_checks_enabled()::Bool  Returns whether inline stability checks are enabled.  See  enable_inline_stability_checks .  source  #  TypeStability.@stable_function     Macro .  @stable_function arg_lists function_name\n@stable_function arg_lists function_definition(s)\n@stable_function arg_lists acceptable_instability function_name\n@stable_function arg_lists acceptable_instability function_definitions(s)  Checks the type stability of the function under the given argument lists.  If the second value is a function definition, the function is defined before checking type stability.  source", 
            "title": "Inline Stability Checks"
        }, 
        {
            "location": "/functions/#external-stability-checks", 
            "text": "#  TypeStability.StabilityReport     Type .  StabilityReport()\nStabilityReport(unstable_variables::Vector{Tuple{Symbol, Type}})  Holds information about the stability of a method.  If  unstable_vars  is present, set the fields.  Otherwise, creates an empty set.  See  is_stable  source  #  TypeStability.is_stable     Function .  is_stable(report::StabilityReport)::Bool\nis_stable(reports::AbstractArray{Tuple{Any, StabilityReport}})::Bool  Check if the given  StabilityReport s don't have any unstable types.  source  #  TypeStability.stability_warn     Function .  stability_warn(func_name, report)  Displays warnings about the function if any of the reports are not stable  source  #  TypeStability.check_function     Function .  check_function(func, signatures, acceptable_instability=Dict())  Check that the function is stable under each of the given signatures.  Return an array of method signature- StabilityReport  pairs from  check_method .  source  #  TypeStability.check_method     Function .  check_method(func, signature, acceptable_instability=Dict())  Create a  StabilityReport  object describing the type stability of the method.  Compute non-concrete types of variables and return value, returning them in a  StabilityReport  Object  acceptable_instability , if present, is a mapping of variables that are allowed be non-concrete types.   get  is called with the mapping, the variable's symbol and  Bool  to get the variable's allowed type.  Additionally, the return value is checked using  :return  as the symbol.  source", 
            "title": "External Stability Checks"
        }, 
        {
            "location": "/functions/#utiltities", 
            "text": "#  TypeStability.RegexDict     Type .  RegexDict(::Tuple{Union{Regex, String}, T}...)  Creates a dictionary that uses Regexes as keys and tests against those when looking up keys. Symbols can be used as lookup keys, by using their name. If multiple Regexes match a key, the value associated with any of them may be returned.  source", 
            "title": "Utiltities"
        }
    ]
}