{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TypeStability.jl Function Documentation Inline Stability Checks External Stability Checks Utiltities TypeStability.jl Inline Stability Checks External Stability Checks TypeStability.jl provides tools to automatically check the type stability of functions. Inline Stability Checks TypeStability.jl provides the ability to inline the checks with the function declarations. The inline checks are disable by default, but are enabled with the function enable_inline_stability_checks(::Bool) . This allows the checks to not reduce the load time of the functions, unless the type stability checks are explictly requested such as while unit testing. A basic example of using inline checks: julia using TypeStability julia enable_inline_stability_checks(true) true julia @stable_function [(Float64,)] function f(x) if x 0 x else Int(0) end end f(Float64) is not stable return is of type Union{Float64, Int64} julia f f (generic function with 1 method) julia @stable_function [(Float64,)] function g(x) if x 0 x else 0.0 end end julia g g (generic function with 1 method) The @stable_function macro has 2 signatures, @stable_function(signatures, function) and @stable_function(signatures, accepted_instability, function) . The signatures argument is a iterable collection of method signatures to test for stability, where each method signature is a tuple of types or an AbstractArray of types. The accepted_instability argument is a Dict -like object with a get method, see check_method for details. Finally, function is either a symbol naming the function to test, or an Expr containing one or more function definitions. Multiple functions can be nesting in a block Expr and macros are expanded before walking the code, but functions nested in structures may not be recognized. If inline_stability_checks_enabled returns true, each function is checked for stability as per check_function , then prints warnings if there are any instabilities found. External Stability Checks Stability can also be checked in a seperate location from the function declarations. The functions check_function and check_method check the stability of a list of methods or just one method respectively and provide StabilityReport objects containing the results. The functions check_function and check_method take an optional argument of accepted_instability , which is an object that should have a get method (like Dict ) that acts as a whitelist of unstable variables. Stability reports can be inspected with the functions is_stable and stability_warn . is_stable takes either a single StabilityReport , an AbstractArray{StabilityReport} or a Set{StabilityReport} object and returns true if all of the reports have no instability. The stability_warn function takes the name of a function and a iterable collection of method signature - stability report pairs and displays a warning message for any instability.","title":"Home"},{"location":"#typestabilityjl","text":"Function Documentation Inline Stability Checks External Stability Checks Utiltities TypeStability.jl Inline Stability Checks External Stability Checks TypeStability.jl provides tools to automatically check the type stability of functions.","title":"TypeStability.jl"},{"location":"#inline-stability-checks","text":"TypeStability.jl provides the ability to inline the checks with the function declarations. The inline checks are disable by default, but are enabled with the function enable_inline_stability_checks(::Bool) . This allows the checks to not reduce the load time of the functions, unless the type stability checks are explictly requested such as while unit testing. A basic example of using inline checks: julia using TypeStability julia enable_inline_stability_checks(true) true julia @stable_function [(Float64,)] function f(x) if x 0 x else Int(0) end end f(Float64) is not stable return is of type Union{Float64, Int64} julia f f (generic function with 1 method) julia @stable_function [(Float64,)] function g(x) if x 0 x else 0.0 end end julia g g (generic function with 1 method) The @stable_function macro has 2 signatures, @stable_function(signatures, function) and @stable_function(signatures, accepted_instability, function) . The signatures argument is a iterable collection of method signatures to test for stability, where each method signature is a tuple of types or an AbstractArray of types. The accepted_instability argument is a Dict -like object with a get method, see check_method for details. Finally, function is either a symbol naming the function to test, or an Expr containing one or more function definitions. Multiple functions can be nesting in a block Expr and macros are expanded before walking the code, but functions nested in structures may not be recognized. If inline_stability_checks_enabled returns true, each function is checked for stability as per check_function , then prints warnings if there are any instabilities found.","title":"Inline Stability Checks"},{"location":"#external-stability-checks","text":"Stability can also be checked in a seperate location from the function declarations. The functions check_function and check_method check the stability of a list of methods or just one method respectively and provide StabilityReport objects containing the results. The functions check_function and check_method take an optional argument of accepted_instability , which is an object that should have a get method (like Dict ) that acts as a whitelist of unstable variables. Stability reports can be inspected with the functions is_stable and stability_warn . is_stable takes either a single StabilityReport , an AbstractArray{StabilityReport} or a Set{StabilityReport} object and returns true if all of the reports have no instability. The stability_warn function takes the name of a function and a iterable collection of method signature - stability report pairs and displays a warning message for any instability.","title":"External Stability Checks"},{"location":"functions/","text":"Function Documentation Function Documentation Inline Stability Checks External Stability Checks Utiltities TypeStability.jl Inline Stability Checks External Stability Checks Inline Stability Checks # TypeStability.enable_inline_stability_checks Function . enable_inline_stability_checks(::Bool) Sets whether to run inline stability checks from @stable_function . If it is set to false (the default value), @stable_function does not perform any type stability checks. The value is checked when @stable_function is evaluated, so this should useually be set at the begining of a package definition. See inline_stability_checks_enabled . source # TypeStability.inline_stability_checks_enabled Function . inline_stability_checks_enabled()::Bool Returns whether inline stability checks are enabled. See enable_inline_stability_checks . source # TypeStability.@stable_function Macro . @stable_function arg_lists function_name @stable_function arg_lists function_definition(s) @stable_function arg_lists acceptable_instability function_name @stable_function arg_lists acceptable_instability function_definitions(s) Checks the type stability of the function under the given argument lists. If the second value is a function definition, the function is defined before checking type stability. source External Stability Checks # TypeStability.StabilityReport Type . StabilityReport() StabilityReport(unstable_variables::Vector{Tuple{Symbol, Type}}) Holds information about the stability of a method. If unstable_vars is present, set the fields. Otherwise, creates an empty set. See is_stable source # TypeStability.is_stable Function . is_stable(report::StabilityReport)::Bool is_stable(reports::AbstractArray{StabilityReport})::Bool is_stable(reports::AbstractArray{Tuple{ :Any, StabilityReport}})::Bool Check if the given StabilityReport s don't have any unstable types. source # TypeStability.stability_warn Function . stability_warn(func_name, report::AbstractArray{Tuple{ :Any,StabilityReport}}) Displays warnings about the function if any of the reports are not stable source # TypeStability.check_function Function . check_function(func, signatures, acceptable_instability=Dict()) Check that the function is stable under each of the given signatures. Return an array of method signature- StabilityReport pairs from check_method . source # TypeStability.check_method Function . check_method(func, signature, acceptable_instability=Dict()) Create a StabilityReport object describing the type stability of the method.is Compute non-concrete types of variables and return value, returning them in a StabilityReport Object acceptable_instability , if present, is a mapping of variables that are allowed be non-concrete types. get is called with the mapping, the variable's symbol and Bool to get the variable's allowed type. Additionally, the return value is checked using :return as the symbol. source Utiltities # TypeStability.RegexDict Type . RegexDict(::Tuple{Union{Regex, String}, T}...) Creates a dictionary that uses Regexes as keys and tests against those when looking up keys. Symbols can be used as lookup keys, by using their name. If multiple Regexes match a key, the value associated with any of them may be returned. source","title":"Functions"},{"location":"functions/#function-documentation","text":"Function Documentation Inline Stability Checks External Stability Checks Utiltities TypeStability.jl Inline Stability Checks External Stability Checks","title":"Function Documentation"},{"location":"functions/#inline-stability-checks","text":"# TypeStability.enable_inline_stability_checks Function . enable_inline_stability_checks(::Bool) Sets whether to run inline stability checks from @stable_function . If it is set to false (the default value), @stable_function does not perform any type stability checks. The value is checked when @stable_function is evaluated, so this should useually be set at the begining of a package definition. See inline_stability_checks_enabled . source # TypeStability.inline_stability_checks_enabled Function . inline_stability_checks_enabled()::Bool Returns whether inline stability checks are enabled. See enable_inline_stability_checks . source # TypeStability.@stable_function Macro . @stable_function arg_lists function_name @stable_function arg_lists function_definition(s) @stable_function arg_lists acceptable_instability function_name @stable_function arg_lists acceptable_instability function_definitions(s) Checks the type stability of the function under the given argument lists. If the second value is a function definition, the function is defined before checking type stability. source","title":"Inline Stability Checks"},{"location":"functions/#external-stability-checks","text":"# TypeStability.StabilityReport Type . StabilityReport() StabilityReport(unstable_variables::Vector{Tuple{Symbol, Type}}) Holds information about the stability of a method. If unstable_vars is present, set the fields. Otherwise, creates an empty set. See is_stable source # TypeStability.is_stable Function . is_stable(report::StabilityReport)::Bool is_stable(reports::AbstractArray{StabilityReport})::Bool is_stable(reports::AbstractArray{Tuple{ :Any, StabilityReport}})::Bool Check if the given StabilityReport s don't have any unstable types. source # TypeStability.stability_warn Function . stability_warn(func_name, report::AbstractArray{Tuple{ :Any,StabilityReport}}) Displays warnings about the function if any of the reports are not stable source # TypeStability.check_function Function . check_function(func, signatures, acceptable_instability=Dict()) Check that the function is stable under each of the given signatures. Return an array of method signature- StabilityReport pairs from check_method . source # TypeStability.check_method Function . check_method(func, signature, acceptable_instability=Dict()) Create a StabilityReport object describing the type stability of the method.is Compute non-concrete types of variables and return value, returning them in a StabilityReport Object acceptable_instability , if present, is a mapping of variables that are allowed be non-concrete types. get is called with the mapping, the variable's symbol and Bool to get the variable's allowed type. Additionally, the return value is checked using :return as the symbol. source","title":"External Stability Checks"},{"location":"functions/#utiltities","text":"# TypeStability.RegexDict Type . RegexDict(::Tuple{Union{Regex, String}, T}...) Creates a dictionary that uses Regexes as keys and tests against those when looking up keys. Symbols can be used as lookup keys, by using their name. If multiple Regexes match a key, the value associated with any of them may be returned. source","title":"Utiltities"}]}